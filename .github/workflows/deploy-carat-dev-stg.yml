name: Deploy Carat Dev/Stg to Cluster
run-name: Deploy ${{ github.event.inputs.DEPLOY_APP }} to ${{ github.event.inputs.DEPLOY_ENV }} (${{ github.event.inputs.DOCKER_IMAGE_SHA || github.event.inputs.DOCKER_IMAGE_TAG }})

on:
  workflow_dispatch:
    inputs:
      DEPLOY_APP:
        description: 'Deployment application'
        required: true
        default: 'carat-dash-be'
        type: choice
        options:
          - carat-core
          - carat-dash-be
      DEPLOY_ENV:
        description: 'Deployment environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - stg
      DOCKER_IMAGE_SHA:
        description: 'Docker image Manifest SHA'
        required: false
        default: ''
      DOCKER_IMAGE_TAG:
        description: 'Docker image Tag'
        required: false
        default: 'latest'

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Check for SHA and Tag
        run: |
          if [ -z "${{ github.event.inputs.DOCKER_IMAGE_SHA }}" ] && [ -z "${{ github.event.inputs.DOCKER_IMAGE_TAG }}" ]; then
            echo "Error: Both SHA and Tag are empty. Exiting."
            exit 1
          fi

      - name: Install Docker
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            apt-transport-https \
            ca-certificates \
            curl \
            software-properties-common
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
          sudo add-apt-repository \
            "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
            $(lsb_release -cs) \
            stable"
          sudo apt-get update
          sudo apt-get install -y docker-ce docker-ce-cli containerd.io
          sudo systemctl start docker

      - name: Docker Login
        run: |
          echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login --username "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin


      - name: Verify Docker image using tag and retrieve SHA digest
        if: ${{ github.event.inputs.DOCKER_IMAGE_SHA == '' }}
        run: |
          REPO="altonium/${{ github.event.inputs.DEPLOY_APP }}-${{ github.event.inputs.DEPLOY_ENV }}"
          TAG="${{ github.event.inputs.DOCKER_IMAGE_TAG }}"
          echo "Pulling Docker image with tag: $TAG"
          docker pull --platform linux/amd64 $REPO:$TAG
          DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' $REPO:$TAG | sed 's/.*@//')
          if [ -z "$DIGEST" ]; then
            echo "Error: Could not retrieve SHA digest for tag $TAG."
            exit 1
          fi
          echo "Retrieved SHA digest: $DIGEST"
          echo "IMAGE_REF=$DIGEST" >> $GITHUB_ENV

      - name: Use Provided SHA Directly
        if: ${{ github.event.inputs.DOCKER_IMAGE_SHA != '' }}
        run: |
          REPO="altonium/${{ github.event.inputs.DEPLOY_APP }}-${{ github.event.inputs.DEPLOY_ENV }}"
          SHA="${{ github.event.inputs.DOCKER_IMAGE_SHA }}"
          echo "Using provided SHA: $SHA"
          echo "IMAGE_REF=$SHA" >> $GITHUB_ENV

      - name: Install kubectl
        run: |
          curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x ./kubectl
          sudo mv ./kubectl /usr/local/bin/kubectl
  
      - name: Install Helm
        run: |
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

      - name: Set up kubeconfig
        run: |
          mkdir -p $HOME/.kube  # Create the .kube directory if it doesn't exist
          echo "${{ secrets.KUBECONFIG_CONTENT }}" | base64 --decode > $HOME/.kube/config
          chmod 600 $HOME/.kube/config
  
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Deploy to Kubernetes with Helm
        run: |
          helm upgrade --install ${{ github.event.inputs.DEPLOY_APP }}-${{ github.event.inputs.DEPLOY_ENV }} ./ \
            -f ${{ github.event.inputs.DEPLOY_APP }}/values-${{ github.event.inputs.DEPLOY_ENV }}.yaml \
            --set image.repository_ref=altonium/${{ github.event.inputs.DEPLOY_APP }}-${{ github.event.inputs.DEPLOY_ENV }}@${{ env.IMAGE_REF }} \
            -n carat-${{ github.event.inputs.DEPLOY_ENV }}
