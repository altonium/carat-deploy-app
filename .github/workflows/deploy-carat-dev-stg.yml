name: Deploy Carat Dev/Stg to Cluster
run-name: Deploy ${{ github.event.inputs.DEPLOY_APP }} to ${{ github.event.inputs.DEPLOY_ENV }} (${{ github.event.inputs.DOCKER_IMAGE_SHA || github.event.inputs.DOCKER_IMAGE_TAG }})

on:
  workflow_dispatch:
    inputs:
      DEPLOY_APP:
        description: 'Deployment application'
        required: true
        default: 'carat-dash-be'
        type: choice
        options:
          - carat-core
          - carat-dash-be
      DEPLOY_ENV:
        description: 'Deployment environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - stg
      DOCKER_IMAGE_SHA:
        description: 'Docker image Manifest SHA'
        required: false
        default: ''
      DOCKER_IMAGE_TAG:
        description: 'Docker image Tag'
        required: false
        default: 'latest'

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Install Docker
        run: |
          sudo apt-get update
          sudo apt-get install -y docker.io
          sudo systemctl start docker

      - name: Docker Login
        run: |
          echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login --username "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Install kubectl
        run: |
          curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x ./kubectl
          sudo mv ./kubectl /usr/local/bin/kubectl

      - name: Install Helm
        run: |
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

      - name: Set up kubeconfig
        run: |
          mkdir -p $HOME/.kube  # Create the .kube directory if it doesn't exist
          echo "${{ secrets.KUBECONFIG_CONTENT }}" | base64 --decode > $HOME/.kube/config
          chmod 600 $HOME/.kube/config

      - name: Verify Docker image using SHA
        if: ${{ github.event.inputs.DOCKER_IMAGE_SHA != '' }}
        run: |
          REPO="altonium/${{ github.event.inputs.DEPLOY_APP }}-${{ github.event.inputs.DEPLOY_ENV }}"
          SHA="${{ github.event.inputs.DOCKER_IMAGE_SHA }}"
          echo "Checking Docker image with SHA: $SHA"
          # Verify that the image exists by pulling its manifest
          if docker manifest inspect $REPO@$SHA > /dev/null; then
            echo "Docker image with SHA $SHA is valid."
            echo "IMAGE_REF=$SHA" >> $GITHUB_ENV
          else
            echo "Error: Docker image with SHA $SHA not found."
            exit 1
          fi

      - name: Verify Docker image using tag
        if: ${{ github.event.inputs.DOCKER_IMAGE_SHA == '' }}
        run: |
          REPO="altonium/${{ github.event.inputs.DEPLOY_APP }}-${{ github.event.inputs.DEPLOY_ENV }}"
          TAG="${{ github.event.inputs.DOCKER_IMAGE_TAG }}"
          echo "Checking Docker image with tag: $TAG"
          # Verify that the image exists by pulling its manifest
          if docker manifest inspect $REPO:$TAG > /dev/null; then
            DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' $REPO:$TAG | sed 's/.*@//')
            echo "Docker image with tag $TAG is valid."
            echo "IMAGE_REF=$DIGEST" >> $GITHUB_ENV
          else
            echo "Error: Docker image with tag $TAG not found."
            exit 1
          fi

      - name: Checkout repository
        uses: actions/checkout@v4

      # Uncomment the following section to deploy to Kubernetes with Helm
      # - name: Deploy to Kubernetes with Helm
      #   run: |
      #     helm upgrade --install ${{ github.event.inputs.DEPLOY_APP }}-${{ github.event.inputs.DEPLOY_ENV }} ./ \
      #       -f ${{ github.event.inputs.DEPLOY_APP }}/values-${{ github.event.inputs.DEPLOY_ENV }}.yaml \
      #       --set image.image_ref=${{ env.IMAGE_REF }} \
      #       -n carat-${{ github.event.inputs.DEPLOY_ENV }}
